# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI-Python

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: ${{secrets.POSTGRESQL_DB_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRESQL_DB_PASSWD}}
          POSTGRES_DB: {{secrets.POSTGRESQL_DB_NAME}}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: Create .env file
        run: |
          echo "Creating .env from .env.sample..."
          cp .env.sample .env

      - name: Load secrets
        run: |
          sed -i 's/DEBUG=/DEBUG=your_db_host/' .env
          sed -i 's/POSTGRESQL_DB_NAME=/POSTGRESQL_DB_NAME=${{secrets.POSTGRESQL_DB_NAME}}/' .env
          sed -i 's/POSTGRESQL_DB_ENGINE=/POSTGRESQL_DB_ENGINE=${{secrets.POSTGRESQL_DB_ENGINE}}/' .env
          sed -i 's/POSTGRESQL_DB_USER=/POSTGRESQL_DB_USER=${{secrets.POSTGRESQL_DB_USER}}/' .env
          sed -i 's/POSTGRESQL_DB_PASSWD=/POSTGRESQL_DB_PASSWD=${{secrets.POSTGRESQL_DB_PASSWD}}/' .env
          sed -i 's/POSTGRESQL_DB_HOST=/POSTGRESQL_DB_HOST=${{secrets.POSTGRESQL_DB_HOST}}/' .env
          sed -i 's/POSTGRESQL_DB_PORT=/POSTGRESQL_DB_PORT=${{secrets.POSTGRESQL_DB_PORT}}/' .env
          echo ".env file created."

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest black isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Python Isort
        run: |
          isort --profile black --skip-gitignore --line-length 90 src/
          isort --profile black --skip-gitignore --line-length 90 tests/

      - name: Python Black
        run: |
          black --line-length=90 --preview src/
          black --line-length=90 --preview tests/

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics --extend-exclude=tests/* --ignore=E712,W503
          # exit-zero treats all errors as warnings. The GitHub editor is 90 chars wide
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=90 --statistics --ignore=E712,W503

      - name: Test with pytest
        run: |
          pytest
